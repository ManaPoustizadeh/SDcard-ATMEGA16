;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 6/12/2017
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32A
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <ff.h>
;#include <delay.h>
;#include <stdlib.h>
;
;#define ENTER 1000
;#define WRITE 1100
;#define READ 1200
;
;void error(int res);
;void write_to_file();
;void seek_in_file(unsigned long addr);
;void read_from_file();
;void error(int res);
;void readNumber();
;int readKey();
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void){
; 0000 002A interrupt [12] void timer0_ovf_isr(void){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002B 	TCNT0=0xB2;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 002C 	disk_timerproc();
;PCODE: $00000011 VOL: 0
; 0000 002D }
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;
;FRESULT res;
;unsigned int nbytes;
;FATFS fat;
;FIL file;
;FILINFO finfo;
;DRESULT dres;
;char path[]="0:/file4.txt";

	.DSEG
;char text1[52]="some text";
;char text2[]="Here's some more text...";
;char buffer[256];
;
;
;void main(void){
; 0000 003B void main(void){

	.CSEG
;PCODE: $00000015 VOL: 0
; 0000 003C 	int result = 0, n = 0, state = 0, cnt = 0;
; 0000 003D 	char numStr[6];
; 0000 003E 	DSTATUS disk_status;
; 0000 003F 	unsigned int sector_size;
; 0000 0040 	unsigned long int sector_count;
; 0000 0041 
; 0000 0042 	DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;	result -> R16,R17
;	n -> R18,R19
;	state -> R20,R21
;	cnt -> Y+13
;	numStr -> Y+7
;	disk_status -> Y+6
;	sector_size -> Y+4
;	sector_count -> Y+0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0043 	PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0044 
; 0000 0045 	DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0046 	PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0047 
; 0000 0048 	DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0049 	PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 004A 
; 0000 004B 	DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 004C 	PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 004D 
; 0000 004E 	// Timer/Counter 0 initialization
; 0000 004F 	// Clock source: System Clock
; 0000 0050 	// Clock value: 7.813 kHz
; 0000 0051 	// Mode: Normal top=0xFF
; 0000 0052 	// OC0 output: Disconnected
; 0000 0053 	// Timer Period: 9.984 ms
; 0000 0054 	TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0055 	TCNT0=0xB2;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0056 	OCR0=0x00;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0057 
; 0000 0058 	// Timer/Counter 1 initialization
; 0000 0059 	// Clock source: System Clock
; 0000 005A 	// Clock value: Timer1 Stopped
; 0000 005B 	// Mode: Normal top=0xFFFF
; 0000 005C 	// OC1A output: Disconnected
; 0000 005D 	// OC1B output: Disconnected
; 0000 005E 	// Noise Canceler: Off
; 0000 005F 	// Input Capture on Falling Edge
; 0000 0060 	// Timer1 Overflow Interrupt: Off
; 0000 0061 	// Input Capture Interrupt: Off
; 0000 0062 	// Compare A Match Interrupt: Off
; 0000 0063 	// Compare B Match Interrupt: Off
; 0000 0064 	TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0065 	TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0066 	TCNT1H=0x00;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0067 	TCNT1L=0x00;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0068 	ICR1H=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0069 	ICR1L=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 006A 	OCR1AH=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 006B 	OCR1AL=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 006C 	OCR1BH=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 006D 	OCR1BL=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 006E 
; 0000 006F 	// Timer/Counter 2 initialization
; 0000 0070 	// Clock source: System Clock
; 0000 0071 	// Clock value: Timer2 Stopped
; 0000 0072 	// Mode: Normal top=0xFF
; 0000 0073 	// OC2 output: Disconnected
; 0000 0074 	ASSR=0<<AS2;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0075 	TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0076 	TCNT2=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0077 	OCR2=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0078 
; 0000 0079 	// Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 007A 	TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 007B 
; 0000 007C 	// External Interrupt(s) initialization
; 0000 007D 	// INT0: Off
; 0000 007E 	// INT1: Off
; 0000 007F 	// INT2: Off
; 0000 0080 	MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0081 	MCUCSR=(0<<ISC2);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0082 
; 0000 0083 	// USART initialization
; 0000 0084 	// USART disabled
; 0000 0085 	UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0086 
; 0000 0087 	// Analog Comparator initialization
; 0000 0088 	// Analog Comparator: Off
; 0000 0089 	// The Analog Comparator's positive input is
; 0000 008A 	// connected to the AIN0 pin
; 0000 008B 	// The Analog Comparator's negative input is
; 0000 008C 	// connected to the AIN1 pin
; 0000 008D 	ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 008E 	SFIOR=(0<<ACME);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 008F 
; 0000 0090 	// ADC initialization
; 0000 0091 	// ADC disabled
; 0000 0092 	ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0093 
; 0000 0094 	// SPI initialization
; 0000 0095 	// SPI disabled
; 0000 0096 	SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0097 
; 0000 0098 	// TWI initialization
; 0000 0099 	// TWI disabled
; 0000 009A 	TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 009B 
; 0000 009C 	// Alphanumeric LCD initialization
; 0000 009D 	lcd_init(16);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 009E 
; 0000 009F 	// Global enable interrupts
; 0000 00A0 	#asm("sei")
;PCODE: $00000067 VOL: 0
	sei
;PCODE: $00000068 VOL: 0
; 0000 00A1 	if ((res=f_mount(0,&fat))!=FR_OK){
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 00A2 		error(1);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00A3 	}
; 0000 00A4 
; 0000 00A5 	if ((res=f_open(&file,path,FA_OPEN_EXISTING | FA_WRITE | FA_READ))!=FR_OK){
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00A6 		if ((res=f_open(&file,path,FA_CREATE_NEW | FA_WRITE | FA_READ))!=FR_OK){
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00A7 			error(res);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00A8 		}
; 0000 00A9 	}
;PCODE: $00000089 VOL: 0
; 0000 00AA 
; 0000 00AB 	   //writing at specified addr in file
; 0000 00AC 	   seek_in_file(10);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00AD 	   text1[0]=20;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00AE 	   write_to_file();
;PCODE: $0000008F VOL: 0
; 0000 00AF 
; 0000 00B0 	   seek_in_file(20);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00B1 	   text1[0]=40;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00B2 	   write_to_file();
;PCODE: $00000094 VOL: 0
; 0000 00B3 
; 0000 00B4 	   seek_in_file(22);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00B5 	   text1[0]=43;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00B6 	   write_to_file();
;PCODE: $00000099 VOL: 0
; 0000 00B7 
; 0000 00B8 
; 0000 00B9 
; 0000 00BA 
; 0000 00BB 
; 0000 00BC 
; 0000 00BD 	while (1){
;PCODE: $0000009A VOL: 0
; 0000 00BE 		int key;
; 0000 00BF 		key= readKey();
;PCODE: $0000009B VOL: 0
;	cnt -> Y+15
;	numStr -> Y+9
;	disk_status -> Y+8
;	sector_size -> Y+6
;	sector_count -> Y+2
;	key -> Y+0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00C0 		if(key != -1 && key < 1000 && (state > 1 || cnt == 1)){
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00C1 			delay_ms(100);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00C2 			result*=10;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00C3 			result+=key;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00C4 			n++;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00C5 			itoa(key, numStr );
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00C6 			lcd_puts(numStr);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00C7 			delay_ms(150);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00C8 			state = 100;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00C9 		}
; 0000 00CA 
; 0000 00CB 		else if(state == 100 && key == ENTER){
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00CC 			lcd_puts(" Enter");
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00CD 			delay_ms(400);
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00CE 			lcd_clear();
;PCODE: $000000D8 VOL: 0
; 0000 00CF 			state = 1;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00D0 			cnt++;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00D1 
; 0000 00D2 			if(cnt == 1 ){
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00D3 				seek_in_file((unsigned long)result);
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00D4 				result = 0;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00D5 			}
; 0000 00D6 
; 0000 00D7 			if(cnt == 2){
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00D8 				text1[0] = result;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00D9 				 write_to_file();
;PCODE: $000000EC VOL: 0
; 0000 00DA 				 result = 0;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00DB 			}
; 0000 00DC 
; 0000 00DD 			if(cnt == 0){
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00DE 				itoa(result  , numStr);
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00DF 				lcd_puts("seek : ");
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00E0 				lcd_puts(numStr);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00E1 				delay_ms(200);
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00E2 				lcd_clear();
;PCODE: $000000FE VOL: 0
; 0000 00E3 				seek_in_file((unsigned long)result);
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 00E4 				result = 0;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00E5 				read_from_file();
;PCODE: $00000104 VOL: 0
; 0000 00E6 				itoa(text2[0], numStr);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00E7 				lcd_puts(numStr);
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00E8 				delay_ms(400);
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00E9 			}
; 0000 00EA 		}
;PCODE: $0000010E VOL: 0
; 0000 00EB 		else if(key == READ && cnt == 2){
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00EC 			lcd_puts("Read");
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00ED 			delay_ms(400);
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00EE 			lcd_clear();
;PCODE: $00000120 VOL: 0
; 0000 00EF 			state = 2;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 00F0 			cnt = -1;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00F1 		}
; 0000 00F2 		else if(key == WRITE && (state == 0 || state == 1) && cnt != 1){
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 00F3 				lcd_puts("Write");
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00F4 				delay_ms(400);
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 00F5 				lcd_clear();
;PCODE: $0000013D VOL: 0
; 0000 00F6 
; 0000 00F7 				state = 3;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00F8 		}
; 0000 00F9 	}
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00FA }
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0

	.DSEG
_0x15:
	.BYTE 0x1A
;void error (int res){
; 0000 00FB void error (int res){

	.CSEG
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00FC     DDRD=0xFF;
;PCODE: $0000014D VOL: 0
;	res -> Y+0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 00FD     PORTD=res;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00FE     while(1){}
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00FF }
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;
;
;void read_from_file(){
; 0000 0102 void read_from_file(){
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 0103     if ((res=f_read(&file,text2,1,&nbytes))!=FR_OK){
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 0104         error(res);
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 0105     }
; 0000 0106 }
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;
;void write_to_file(){
; 0000 0108 void write_to_file(){
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 0109 if ((res=f_write(&file,text1,1,&nbytes))!=FR_OK)
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 010A    error(res);
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 010B f_sync(&file);
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 010C }
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;
;
;
;void seek_in_file(unsigned long addr){
; 0000 0110 void seek_in_file(unsigned long addr){
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 0111     unsigned long i;
; 0000 0112     if ((res=f_lseek(&file, addr))!=FR_OK){
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;	addr -> Y+4
;	i -> Y+0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 0113         error(res);
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 0114     }
; 0000 0115 }
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;
;
;
;int readKey(){
; 0000 0119 int readKey(){
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 011A 	int col =-1 ;
; 0000 011B 	int row;
; 0000 011C 	DDRC = 0x0F;
;PCODE: $00000194 VOL: 0
;	col -> R16,R17
;	row -> R18,R19
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 011D 	PORTC.0 = 0;
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 011E 	PORTC.1 = 0;
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 011F 	PORTC.2 = 0;
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 0120 	PORTC.3 = 0;
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 0121 	PORTC.4 = 1;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 0122 	PORTC.5 = 1;
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 0123 	PORTC.6 = 1;
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 0124 	PORTC.7 = 1;
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 0125 	delay_ms (2);
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 0126     if(PINC.4 == 0)
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 0127         col = 0;
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 0128     else if(PINC.5 == 0)
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 0129         col = 1;
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 012A     else if(PINC.6 == 0)
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 012B         col = 2;
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 012C     else if(PINC.7 == 0)
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 012D         col = 3;
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 012E     DDRC = 0xF0;
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 012F     PORTC.0 = 1;
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 0130     PORTC.1 = 1;
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 0131     PORTC.2 = 1;
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 0132     PORTC.3 = 1;
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 0133     PORTC.4 = 0;
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 0134     PORTC.5 = 0;
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 0135     PORTC.6 = 0;
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 0136     PORTC.7 = 0;
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 0137 
; 0000 0138     delay_ms(2);
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 0139 
; 0000 013A     if(PINC.0 == 0)
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 013B         row = 0;
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 013C     else if(PINC.1 == 0)
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 013D         row = 1;
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 013E     else if(PINC.2 == 0)
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 013F         row = 2;
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 0140     else if(PINC.3 == 0)
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 0141         row = 3;
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 0142 
; 0000 0143 
; 0000 0144     if(col == 3){
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 0145         if(row == 3)
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 0146             return ENTER;
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 0147         if(row == 2)
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 0148             return WRITE;
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 0149         if(row == 1)
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 014A             return READ;
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 014B 
; 0000 014C     }
;PCODE: $00000217 VOL: 0
; 0000 014D 
; 0000 014E     if(row == 0)
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 014F         if(col != 0)
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 0150             return -1;
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 0151 
; 0000 0152     if(col==-1)
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 0153         return col;
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 0154 
; 0000 0155     return col*3+row ;
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 0156 
; 0000 0157 }
;PCODE: $00000232 VOL: 0
;void readNumber(){
; 0000 0158 void readNumber(){
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0000 0159     readKey();
;PCODE: $00000235 VOL: 0
; 0000 015A }
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
